<?php
/** 
 * Copyright (c) 2016 simpart
 *  
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * @file   session.php
 * @brief  session data manage function
 * @author simpart
 * @note   generated by trut
 */
namespace session;

try {session_start();}
catch ( Exception $e ) {
  throw new Exception(
    PHP_EOL.'ERR(File:'.basename(__FILE__).','.',Line:'.__line__.'):'.
    get_class($this).'->'.__FUNCTION__.'()'.$e->getMessage()
  );
}

/*** function ***/
/**
 * @fn     get
 * @brief  get specify session data
 * @param  (string) session hash key
 * @return (mixed) session data
 * @return (null) not set data 
 */
function get( $key ) {
  try {
    if ( !isset( $_SESSION[$key] ) ) {
      return null;
    }
    return $_SESSION[$key];
  } catch( Exception $e ) {
    throw new Exception( 'ERR(File:'.basename(__FILE__).',Line:'.__line__.'):'.
                         __FUNCTION__.'()'.PHP_EOL.$e->getMessage() );
    }
  }
  
/**
 * @fn    set
 * @brief set specify session data
 * @param (string) hash key
 * @param (mixed) set session data
 * @param (bool) regenerate session id flag
 */
function set( $hkey , $val , $flg=true ) {
    try {
      if( false === $flg ) {
        session_regenerate_id( false );
        $_SESSION[$hkey] = $val;
        return;
      }
      $lst_buf = array();
      foreach( $_SESSION as $skey => $buf ) {
        $lst_buf[$skey] = $buf;
      }
      reset();
      foreach( $lst_buf as $idx => $buf2 ) {
        $_SESSION[$idx] = $buf2;
      }
      $_SESSION[$hkey] = $val;
    } catch( Exception $e ) {
      throw new Exception( 'ERR(File:'.basename(__FILE__).',Line:'.__line__.'):'.
                           __FUNCTION__.'('.$s_idx.','.$val.','.$flg.')'.PHP_EOL.$e->getMessage() );
    }
  }

/**
 * @fn    reset
 * @brief reset session data
 */  
function reset() {
  try {
    foreach( $_SESSION as $key => $val ) {
      unset( $_SESSION[$key] );
    }
    session_regenerate_id( true );
  } catch( Exception $e ) {
    throw new Exception( 'ERR(File:'.basename(__FILE__).',Line:'.__line__.'):'.
                         __FUNCTION__.'()'.PHP_EOL.$e->getMessage() );
  }
}
  
/**
 * @fn     isExists
 * @brief  check exists session key
 * @param  (string) session hash key
 * @return (bool) exists result
 */
function isExists( $key ) {
  try {
    return array_key_exists ( $key , $_SESSION );
  } catch( Exception $e ) {
    throw new Exception( 'ERR(File:'.basename(__FILE__).',Line:'.__line__.'):'.
                         __FUNCTION__.'()'.PHP_EOL.$e->getMessage() );
  }
}

/**
 * @fn     getSts
 * @brief  get session status
 * @return (array) session status string
 */
function getSts() {
  try {
    $ret_val   = array();
    foreach( $_SESSION as $key => $val ) {
      $ret_val[] = $key.':'.$val;
    }
  } catch ( Exception $e ) {
    throw new Exception( 'ERR(File:'.basename(__FILE__).',Line:'.__line__.'):'.
                         __FUNCTION__.'()'.PHP_EOL.$e->getMessage() );
  }
}
  
/* end of file */
